<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Reaction Game with Analytics</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
  <h1>🎯 Reaction Time Trainer</h1>

  <!-- Hardware Status Indicator -->
  <div class="hardware-status" id="hardware-status">
    🔌 Physical Buttons: <span id="hardware-indicator">Detecting...</span>
  </div>

  <!-- Mode and Difficulty Controls -->
  <div class="controls">
    <label for="mode">Game Mode:</label>
    <select id="mode">
      <option value="time_attack">⚡ Time Attack (Score Challenge)</option>
      <option value="unlimited">♾️ Unlimited (Endless Practice)</option>
      <option value="endurance">💪 Endurance (5 Rounds)</option>
    </select>

    <label for="difficulty">Difficulty:</label>
    <select id="difficulty">
      <option value="easy">😊 Easy (60s, 2-4s delay)</option>
      <option value="medium">😐 Medium (45s, 1-3s delay)</option>
      <option value="hard">😤 Hard (30s, 0.5-2s delay)</option>
    </select>

    <button onclick="startGame()">🚀 Start Game</button>
  </div>

  <!-- Live Metrics Display -->
  <div class="metrics-container">
    <h3>📊 Live Performance Metrics</h3>
    <div class="metrics-grid">
      <div class="metric-item">
        <div class="metric-label">Average Time</div>
        <div class="metric-value" id="avg-time">-</div>
      </div>
      <div class="metric-item">
        <div class="metric-label" id="correct-label">✅ Correct</div>
        <div class="metric-value" id="correct-count">0</div>
      </div>
      <div class="metric-item">
        <div class="metric-label" id="wrong-label">❌ Wrong</div>
        <div class="metric-value" id="wrong-count">0</div>
      </div>
      <div class="metric-item">
        <div class="metric-label">🏆 Best Time</div>
        <div class="metric-value" id="highscore">-</div>
      </div>
    </div>
  </div>

  <!-- Round Info -->
  <div class="countdown" id="countdown">Ready to start!</div>
  <div id="round-counter">Round 0 of 5</div>

  <!-- Game Buttons -->
  <div class="button-container">
    <button class="game-button" id="button1" onclick="handleButtonPress(1)">🎮 Button 1</button>
    <button class="game-button" id="button2" onclick="handleButtonPress(2)">🎮 Button 2</button>
  </div>

  <!-- Status and Coach Boxes -->
  <div class="info-boxes">
    <div class="status-box">
      <h4>🎮 Game Status</h4>
      <div id="status">Press Start to Play</div>
    </div>
    <div class="coach-box">
      <h4>🤖 Mini Coach</h4>
      <div id="coachBox">Your AI coach will guide you here!</div>
    </div>
  </div>

  <!-- Results Table -->
  <div class="results" id="results"></div>
  <table id="attempts-table">
    <thead>
      <tr>
        <th>Round</th>
        <th>Reaction Time (ms)</th>
        <th>Status</th>
        <th>Points</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <!-- Analytics Chart -->
  <h2>📈 Performance Analytics</h2>
  <div class="chart-container">
    <canvas id="reactionChart" width="600" height="300"></canvas>
  </div>

  <canvas class="confetti" id="confetti-canvas"></canvas>

  <!-- External Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Core Game Modules - Load in dependency order -->
  <script src="{{ url_for('static', filename='js/ui-updates.js') }}"></script>
  <script src="{{ url_for('static', filename='js/metrics.js') }}"></script>
  <script src="{{ url_for('static', filename='js/charts.js') }}"></script>
  <script src="{{ url_for('static', filename='js/coach.js') }}"></script>
  <script src="{{ url_for('static', filename='js/hardware.js') }}"></script>
  <script src="{{ url_for('static', filename='js/game-core.js') }}"></script>

  <!-- Initialize Application -->
  <script>
    // Initialize all modules when page loads
    window.addEventListener("DOMContentLoaded", () => {
      // Load stored game data
      const storedResults = Storage.initializeFromStorage();
      if (storedResults.length) {
        sessionResults.length = 0; // Clear array
        sessionResults.push(...storedResults); // Add stored data
        UI.updateAttemptsTable();
        highScore = Metrics.calculateHighScore();
        Metrics.updateLiveMetrics();
      }
      
      // Initialize chart
      Charts.initChart();
      Charts.updateChart();
      
      // Initialize hardware integration
      Hardware.init();
    });
  </script>

</body>
</html>